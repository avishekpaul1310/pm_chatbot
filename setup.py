import os
import secrets

# Required environment variables
REQUIRED_VARS = [
    'DJANGO_SECRET_KEY',
    'OPENAI_API_KEY',
    'GOOGLE_SHEETS_CREDENTIALS_FILE',
    'GOOGLE_SHEETS_PROJECT_DB'
]
def generate_secret_key():
    """Generate a secure random string for Django's SECRET_KEY setting."""
    return secrets.token_urlsafe(50)

def create_env_file():
    """Create or update the .env file with required variables."""
    """Create or update the .env file with required variables."""
    if os.path.exists('.env'):
        print("\nExisting .env file found.")
        overwrite = input("Do you want to update it? (y/n): ").lower()
        if overwrite != 'y':
            print("Skipping .env file creation.")
            return
    
    # Generate template with existing values or placeholders
    env_content = """# Django Settings
# Generated by setup script on {date}
DJANGO_SECRET_KEY={secret_key}

# Debug mode (set to False in production)
DEBUG=True

# Allowed hosts (comma-separated)
ALLOWED_HOSTS=localhost,127.0.0.1

# OpenAI API key
# Get this from https://platform.openai.com/api-keys
OPENAI_API_KEY={openai_key}

# Google Sheets credentials
# Path to the JSON file downloaded from Google Cloud Console
GOOGLE_SHEETS_CREDENTIALS_FILE={sheets_cred_file}

# Google Sheets spreadsheet ID
# This is the long string in your Google Sheets URL: https://docs.google.com/spreadsheets/d/[THIS_IS_THE_ID]/edit
GOOGLE_SHEETS_PROJECT_DB={sheets_id}

# Cache timeout for Google Sheets data (in seconds)
GOOGLE_SHEETS_CACHE_TIMEOUT=300
""".format(
        date=__import__('datetime').datetime.now().strftime('%Y-%m-%d'),
        secret_key=os.getenv('DJANGO_SECRET_KEY', generate_secret_key()),
        openai_key=os.getenv('OPENAI_API_KEY', 'your-openai-api-key-here'),
        sheets_cred_file=os.getenv('GOOGLE_SHEETS_CREDENTIALS_FILE', 'path/to/your-google-credentials.json'),
        sheets_id=os.getenv('GOOGLE_SHEETS_PROJECT_DB', 'your-google-sheets-id-here')
    )
    
    # Write to .env file
    with open('.env', 'w') as f:
        f.write(env_content)
    
    print("\n.env file created successfully!")
    if os.getenv('DJANGO_SECRET_KEY') is None:
        print("A new Django secret key was generated and saved to the .env file.")