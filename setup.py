#!/usr/bin/env python
"""
Project Management Chatbot Setup Script

This script helps set up the project by:
1. Checking if all required environment variables are set
2. Generating a Django secret key if not provided
3. Creating an .env file if it doesn't exist
4. Running migrations
5. Creating an admin user if requested
"""

import os
import sys
import secrets
import getpass
import re
import subprocess
import django
from dotenv import load_dotenv

# Try to load existing environment variables
load_dotenv()

# Required environment variables
REQUIRED_VARS = [
    'DJANGO_SECRET_KEY',
    'OPENAI_API_KEY',
    'GOOGLE_GEMINI_API_KEY',
    'GOOGLE_SHEETS_CREDENTIALS_FILE',
    'GOOGLE_SHEETS_PROJECT_DB'
]

def generate_secret_key():
    """Generate a secure Django secret key."""
    return secrets.token_urlsafe(50)

def check_env_vars():
    """Check if all required environment variables are set."""
    missing_vars = []
    for var in REQUIRED_VARS:
        if not os.getenv(var):
            missing_vars.append(var)
    
    return missing_vars

def create_env_file():
    """Create or update the .env file with required variables."""
    if os.path.exists('.env'):
        print("\nExisting .env file found.")
        overwrite = input("Do you want to update it? (y/n): ").lower()
        if overwrite != 'y':
            print("Skipping .env file creation.")
            return
    
    # Generate template with existing values or placeholders
    env_content = """# Django Settings
# Generated by setup script on {date}
DJANGO_SECRET_KEY={secret_key}

# Debug mode (set to False in production)
DEBUG=True

# Allowed hosts (comma-separated)
ALLOWED_HOSTS=localhost,127.0.0.1

# OpenAI API key
# Get this from https://platform.openai.com/api-keys
OPENAI_API_KEY={openai_key}

# Google Gemini API key
# Get this from https://ai.google.dev/
GOOGLE_GEMINI_API_KEY={gemini_key}

# Google Sheets credentials
# Path to the JSON file downloaded from Google Cloud Console
GOOGLE_SHEETS_CREDENTIALS_FILE={sheets_cred_file}

# Google Sheets spreadsheet ID
# This is the long string in your Google Sheets URL: https://docs.google.com/spreadsheets/d/[THIS_IS_THE_ID]/edit
GOOGLE_SHEETS_PROJECT_DB={sheets_id}

# Cache timeout for Google Sheets data (in seconds)
GOOGLE_SHEETS_CACHE_TIMEOUT=300
""".format(
        date=__import__('datetime').datetime.now().strftime('%Y-%m-%d'),
        secret_key=os.getenv('DJANGO_SECRET_KEY', generate_secret_key()),
        openai_key=os.getenv('OPENAI_API_KEY', 'your-openai-api-key-here'),
        gemini_key=os.getenv('GOOGLE_GEMINI_API_KEY', 'your-google-gemini-api-key-here'),
        sheets_cred_file=os.getenv('GOOGLE_SHEETS_CREDENTIALS_FILE', 'path/to/your-google-credentials.json'),
        sheets_id=os.getenv('GOOGLE_SHEETS_PROJECT_DB', 'your-google-sheets-id-here')
    )
    
    # Write to .env file
    with open('.env', 'w') as f:
        f.write(env_content)
    
    print("\n.env file created successfully!")
    if os.getenv('DJANGO_SECRET_KEY') is None:
        print("A new Django secret key was generated and saved to the .env file.")

def run_migrations():
    """Run Django migrations."""
    print("\nRunning migrations...")
    
    try:
        # Try to set up Django for direct command calls
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project_chatbot.settings')
        django.setup()
        
        # Make migrations if needed
        from django.core.management import call_command
        call_command('makemigrations')
        call_command('migrate')
        
        print("Migrations completed successfully!")
        return True
    except Exception as e:
        print(f"Error running migrations: {e}")
        
        # Fallback to subprocess for running migrations
        try:
            print("Trying alternative method...")
            subprocess.run([sys.executable, 'manage.py', 'makemigrations'], check=True)
            subprocess.run([sys.executable, 'manage.py', 'migrate'], check=True)
            print("Migrations completed successfully!")
            return True
        except subprocess.CalledProcessError as e:
            print(f"Error running migrations: {e}")
            return False

def create_admin_user():
    """Create an admin user interactively."""
    print("\nCreating admin user...")
    
    try:
        # Set up Django environment if not already set up
        if 'DJANGO_SETTINGS_MODULE' not in os.environ:
            os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project_chatbot.settings')
            django.setup()
        
        from django.contrib.auth.models import User
        
        # Get admin details
        username = input("Admin username: ")
        email = input("Admin email: ")
        
        # Check if user already exists
        if User.objects.filter(username=username).exists():
            print(f"User '{username}' already exists!")
            return True
        
        # Get password securely
        password = getpass.getpass("Admin password: ")
        password_confirm = getpass.getpass("Confirm password: ")
        
        if password != password_confirm:
            print("Passwords don't match!")
            return False
        
        # Create the admin user
        User.objects.create_superuser(username=username, email=email, password=password)
        print(f"Admin user '{username}' created successfully!")
        return True
    except Exception as e:
        print(f"Error creating admin user: {e}")
        
        # Fallback to running the management command
        try:
            print("Trying management command...")
            
            username = input("Admin username: ")
            email = input("Admin email: ")
            password = getpass.getpass("Admin password: ")
            
            subprocess.run([
                sys.executable, 'manage.py', 'create_admin',
                '--username', username,
                '--email', email,
                '--password', password
            ], check=True)
            
            return True
        except subprocess.CalledProcessError as e:
            print(f"Error creating admin user: {e}")
            return False

def main():
    print("=== Project Management Chatbot Setup ===\n")
    
    # Check for missing environment variables
    missing_vars = check_env_vars()
    if missing_vars:
        print("The following required environment variables are missing:")
        for var in missing_vars:
            print(f"  - {var}")
        
        create_env = input("\nDo you want to create/update the .env file? (y/n): ").lower()
        if create_env == 'y':
            create_env_file()
        else:
            print("\nPlease set the required environment variables before proceeding.")
            sys.exit(1)
    else:
        print("All required environment variables are set!")
    
    # Run migrations
    run_migrations_choice = input("\nDo you want to run database migrations? (y/n): ").lower()
    if run_migrations_choice == 'y':
        if not run_migrations():
            print("\nFailed to run migrations. Please check the error and try again.")
            sys.exit(1)
    
    # Create admin user
    create_admin_choice = input("\nDo you want to create an admin user? (y/n): ").lower()
    if create_admin_choice == 'y':
        if not create_admin_user():
            print("\nFailed to create admin user. Please check the error and try again.")
            sys.exit(1)
    
    print("\n=== Setup completed successfully! ===")
    print("\nYou can now run the server with:")
    print("python manage.py runserver")
    print("\nAccess the application at: http://localhost:8000")

if __name__ == "__main__":
    main()